import os
import re
import tkinter as tk
import customtkinter as ctk
from tkinter import ttk
from tkinter import filedialog
from PIL import Image, ImageTk

class ImageScroller(ctk.CTkFrame):
    """
    Features to add:
    has to check for the existence of a "segmented" folder within the current directory
    if it does exist, draw a polygon of "region of interest" on top of the existing slice
    the opacity has to be adjustable
        Add a slider with polygon opacity adjustment
    Has to be able to "click" on the window to direct the time/space scrolling, the border of the window has to change 
    Has to check live for segmentation being drawn, and also check for 
    """
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.grid(sticky="nsew")

        # Initialize variables
        self.time_index = 0
        self.slice_index = 0

        # Create UI elements
        self.create_widgets()

        # Load base path and images
        self.base_path = filedialog.askdirectory(title="Select the base folder")
        self.load_images()

        # Load the initial image
        self.load_image(self.slice_index, self.time_index)

        # Bind arrow keys
        self.bind_keys()
        self.focus_set()

    def create_widgets(self):
        """Create and place the UI elements."""
        self.label_image = ctk.CTkLabel(self, text="")
        self.label_image.grid(row=0, column=0, padx=10, pady=10)

        self.label_status = ctk.CTkLabel(self, text="")
        self.label_status.grid(row=1, column=0, padx=10, pady=10)

    def load_images(self):
        """Load time folders and slice files."""
        # Regular expression to match time folders in the format time001, time002, etc.
        time_pattern = re.compile(r'^time\d{3}$')

        # Get all time folders matching the format
        self.time_folders = sorted([d for d in os.listdir(self.base_path) 
                                    if os.path.isdir(os.path.join(self.base_path, d)) and time_pattern.match(d)])
        print(f"Time folders found: {len(self.time_folders)}")  # Debugging line

        # Get all slice files for each time folder
        self.slice_files = [sorted([f for f in os.listdir(os.path.join(self.base_path, t)) if os.path.isfile(os.path.join(self.base_path, t, f))]) for t in self.time_folders]
        print(f"Slice files found: {len(self.slice_files[0])}")  # Debugging line

    def load_image(self, slice_index, time_index):
        """Load and display the image based on current slice and time index."""
        time_folder = self.time_folders[time_index]
        slice_file = self.slice_files[time_index][slice_index]
        image_path = os.path.join(self.base_path, time_folder, slice_file)

        # Convert to the correct format for the operating system
        image_path = image_path.replace('\\', '/')
        # print(f"Loading image: {image_path}")  # Debugging line

        try:
            img = Image.open(image_path)
            img = img.resize((400, 400))  # Resize the image for display
            img_tk = ImageTk.PhotoImage(img)
            
            self.label_image.configure(image=img_tk)
            self.label_image.image = img_tk  # Keep a reference to avoid garbage collection
            self.label_status.configure(text=f"Time: {self.time_index+1}/{len(self.time_folders)}, Slice: {self.slice_index+1}/{len(self.slice_files[0])}")
        except Exception as e:
            print(f"Error loading image: {e}")  # Debugging line

    def on_key_press(self, event):
        """Handle key press events."""
        print(f"Key pressed: {event.keysym}")  # Debugging line

        if event.keysym == "Right":
            self.time_index = (self.time_index + 1) % len(self.time_folders)
            print("Right key clicked")
        elif event.keysym == "Left":
            self.time_index = (self.time_index - 1) % len(self.time_folders)
        elif event.keysym == "Down":
            self.slice_index = (self.slice_index - 1) % len(self.slice_files[self.time_index])
        elif event.keysym == "Up":
            self.slice_index = (self.slice_index + 1) % len(self.slice_files[self.time_index])
        else:
            print("Other key pressed")  # Debugging line

        self.load_image(self.slice_index, self.time_index)

    def bind_keys(self):
        """Bind arrow keys to the widget."""
        self.bind("<Right>", self.on_key_press)
        self.bind("<Left>", self.on_key_press)
        self.bind("<Up>", self.on_key_press)
        self.bind("<Down>", self.on_key_press)

# Create the main window
root = ctk.CTk()
root.title("Image Scroller")

# Create and pack the ImageScroller frame
image_scroller = ImageScroller(master=root)
image_scroller.pack(fill="both", expand=True)

# Start the Tkinter event loop
root.mainloop()
