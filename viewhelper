import os
import re
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
from PIL import Image, ImageTk

def load_image(slice_index, time_index):
    """Load and display the image based on current slice and time index."""
    time_folder = time_folders[time_index]
    slice_file = slice_files[time_index][slice_index]
    image_path = os.path.join(base_path, time_folder, slice_file)
    
    # Convert to the correct format for the operating system
    image_path = image_path.replace('\\', '/')
    print(f"Loading image: {image_path}")  # Debugging line
    
    try:
        img = Image.open(image_path)
        img = img.resize((400, 400))  # Resize the image for display
        img_tk = ImageTk.PhotoImage(img)
        
        label_image.config(image=img_tk)
        label_image.image = img_tk  # Keep a reference to avoid garbage collection
        label_status.config(text=f"Time: {time_index+1}/{len(time_folders)}, Slice: {slice_index+1}/{len(slice_files[0])}")
    except Exception as e:
        print(f"Error loading image: {e}")  # Debugging line

def on_key_press(event):
    """Handle key press events."""
    global slice_index, time_index

    print(f"Key pressed: {event.keysym}")  # Debugging line
    
    if event.keysym == "Right":
        time_index = (time_index + 1) % len(time_folders)
        print("Right key clicked")
    elif event.keysym == "Left":
        time_index = (time_index - 1) % len(time_folders)
    elif event.keysym == "Down":
        slice_index = (slice_index - 1) % len(slice_files[time_index])
    elif event.keysym == "Up":
        slice_index = (slice_index + 1) % len(slice_files[time_index])
    else:
        print("Other key pressed")  # Debugging line

    load_image(slice_index, time_index)

# Create Tkinter window
root = tk.Tk()
root.title("Image Scroller")

# Ask the user to select the base folder
base_path = filedialog.askdirectory(title="Select the base folder")

# Get all time folders
# Regular expression to match time folders in the format time001, time002, etc.
time_pattern = re.compile(r'^time\d{3}$')

# Get all time folders matching the format
time_folders = sorted([d for d in os.listdir(base_path) 
                       if os.path.isdir(os.path.join(base_path, d)) and time_pattern.match(d)])

print(f"Time folders found: {len(time_folders)}")  #

# Get all slice files for each time folder
slice_files = [sorted([f for f in os.listdir(os.path.join(base_path, t)) if os.path.isfile(os.path.join(base_path, t, f))]) for t in time_folders]
print(f"Slice files found: {len(slice_files[0])}")  # Debugging line

# Initialize indices
time_index = 0
slice_index = 0

# Create a label to display the image
label_image = ttk.Label(root)
label_image.pack()

# Create a label to display the current slice and time
label_status = ttk.Label(root, text="")
label_status.pack()

# Bind arrow keys to the root window
root.bind("<Right>", on_key_press)
root.bind("<Left>", on_key_press)
root.bind("<Up>", on_key_press)
root.bind("<Down>", on_key_press)

# Ensure the root window has focus
root.focus_set()

# Load the initial image
load_image(slice_index, time_index)

# Start the Tkinter event loop
root.mainloop()
