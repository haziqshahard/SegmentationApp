import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the PNG image as a grayscale image (0 means grayscale mode)
binary_mask = cv2.imread('mask.png', cv2.IMREAD_GRAYSCALE)

# Convert the image to binary (thresholding if necessary)
# Assuming the binary image contains values 0 and 255, otherwise threshold it
# _, binary_mask = cv2.threshold(binary_mask, 0, 255, cv2.THRESH_BINARY)

# Assuming 'binary_mask' is your binary mask as a numpy array
# Find contours in the binary mask
contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

# Get the first contour (assuming you only have one object)
boundary_points = contours[0]  # (N, 1, 2) array representing x, y coordinates

numpoints = 10
step = len(boundary_points)//numpoints
resampled_list = boundary_points[::numpoints]

# Reshape it to (N, 2) format for easier plotting
boundary_points = resampled_list.reshape(-1, 2)
tupledlist = [tuple(inner_list) for inner_list in boundary_points]
print(tupledlist)

# Separate x and y coordinates
x_points = boundary_points[:, 0]
y_points = boundary_points[:, 1]

# Plotting the points
plt.figure(figsize=(6, 6))
plt.plot(x_points, y_points, 'o', label="Boundary Points")
plt.gca().invert_yaxis()  # Invert y-axis to match the image coordinate system
plt.title("Boundary of Binary Mask")
plt.xlabel("X coordinates")
plt.ylabel("Y coordinates")
plt.legend()
plt.show()